generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Designers {
  id          String     @id @default(cuid())
  isPublished Boolean?   @default(false)
  firstName   String?
  lastName    String?
  slug        String?    @unique
  email       String?
  url         String?
  x           String?
  instagram   String?
  dribble     String?
  oneLiner    String?
  rolesId     String?
  salariesId  String?
  countriesId String?
  companiesId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  answers     Answers[]
  companies   Companies? @relation(fields: [companiesId], references: [id])
  countries   Countries? @relation(fields: [countriesId], references: [id])
  roles       Roles?     @relation(fields: [rolesId], references: [id])
  salaries    Salaries?  @relation(fields: [salariesId], references: [id])
  apps        Apps[]     @relation("AppsToDesigners")
  books       Books[]    @relation("BooksToDesigners")

  @@index([slug])
}

model Questions {
  id        String    @id @default(cuid())
  question  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  answerId  String?
  Answers   Answers[]
}

model Answers {
  id          String     @id @default(cuid())
  answer      String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  designerId  String?
  questionsid String?
  designer    Designers? @relation(fields: [designerId], references: [id])
  questions   Questions? @relation(fields: [questionsid], references: [id])
}

model Apps {
  id        String      @id @default(cuid())
  app       String?
  desc      String?
  url       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  designers Designers[] @relation("AppsToDesigners")
}

model Books {
  id        String      @id @default(cuid())
  book      String?
  author    String?
  url       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  bookCover String?
  designers Designers[] @relation("BooksToDesigners")
}

model Roles {
  id        String      @id @default(cuid())
  role      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  designers Designers[]
}

model Countries {
  id        String      @id @default(cuid())
  country   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  designers Designers[]
}

model Salaries {
  id        String      @id @default(cuid())
  salary    Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  designers Designers[]
}

model Companies {
  id            String       @id @default(cuid())
  company       String?
  desc          String?
  url           String?
  companySizeId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  CompanySize   CompanySize? @relation(fields: [companySizeId], references: [id])
  designers     Designers[]
}

model CompanySize {
  id        String      @id @default(cuid())
  size      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  companies Companies[]
}
